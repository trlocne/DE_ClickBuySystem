/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.events;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for click events */
@org.apache.avro.specific.AvroGenerated
public class ClickEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9149643741597380889L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClickEvent\",\"namespace\":\"com.events\",\"doc\":\"Schema for click events\",\"fields\":[{\"name\":\"event\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sessionId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"category\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"itemId\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClickEvent> ENCODER =
      new BinaryMessageEncoder<ClickEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClickEvent> DECODER =
      new BinaryMessageDecoder<ClickEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClickEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClickEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClickEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClickEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClickEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClickEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClickEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClickEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence event;
  private java.lang.CharSequence sessionId;
  private java.lang.CharSequence timestamp;
  private java.lang.CharSequence category;
  private java.lang.CharSequence itemId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClickEvent() {}

  /**
   * All-args constructor.
   * @param event The new value for event
   * @param sessionId The new value for sessionId
   * @param timestamp The new value for timestamp
   * @param category The new value for category
   * @param itemId The new value for itemId
   */
  public ClickEvent(java.lang.CharSequence event, java.lang.CharSequence sessionId, java.lang.CharSequence timestamp, java.lang.CharSequence category, java.lang.CharSequence itemId) {
    this.event = event;
    this.sessionId = sessionId;
    this.timestamp = timestamp;
    this.category = category;
    this.itemId = itemId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return event;
    case 1: return sessionId;
    case 2: return timestamp;
    case 3: return category;
    case 4: return itemId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: event = (java.lang.CharSequence)value$; break;
    case 1: sessionId = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.CharSequence)value$; break;
    case 3: category = (java.lang.CharSequence)value$; break;
    case 4: itemId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'event' field.
   * @return The value of the 'event' field.
   */
  public java.lang.CharSequence getEvent() {
    return event;
  }


  /**
   * Sets the value of the 'event' field.
   * @param value the value to set.
   */
  public void setEvent(java.lang.CharSequence value) {
    this.event = value;
  }

  /**
   * Gets the value of the 'sessionId' field.
   * @return The value of the 'sessionId' field.
   */
  public java.lang.CharSequence getSessionId() {
    return sessionId;
  }


  /**
   * Sets the value of the 'sessionId' field.
   * @param value the value to set.
   */
  public void setSessionId(java.lang.CharSequence value) {
    this.sessionId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'itemId' field.
   * @return The value of the 'itemId' field.
   */
  public java.lang.CharSequence getItemId() {
    return itemId;
  }


  /**
   * Sets the value of the 'itemId' field.
   * @param value the value to set.
   */
  public void setItemId(java.lang.CharSequence value) {
    this.itemId = value;
  }

  /**
   * Creates a new ClickEvent RecordBuilder.
   * @return A new ClickEvent RecordBuilder
   */
  public static com.events.ClickEvent.Builder newBuilder() {
    return new com.events.ClickEvent.Builder();
  }

  /**
   * Creates a new ClickEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClickEvent RecordBuilder
   */
  public static com.events.ClickEvent.Builder newBuilder(com.events.ClickEvent.Builder other) {
    if (other == null) {
      return new com.events.ClickEvent.Builder();
    } else {
      return new com.events.ClickEvent.Builder(other);
    }
  }

  /**
   * Creates a new ClickEvent RecordBuilder by copying an existing ClickEvent instance.
   * @param other The existing instance to copy.
   * @return A new ClickEvent RecordBuilder
   */
  public static com.events.ClickEvent.Builder newBuilder(com.events.ClickEvent other) {
    if (other == null) {
      return new com.events.ClickEvent.Builder();
    } else {
      return new com.events.ClickEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClickEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClickEvent>
    implements org.apache.avro.data.RecordBuilder<ClickEvent> {

    private java.lang.CharSequence event;
    private java.lang.CharSequence sessionId;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence category;
    private java.lang.CharSequence itemId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.events.ClickEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.event)) {
        this.event = data().deepCopy(fields()[0].schema(), other.event);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[1].schema(), other.sessionId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.category)) {
        this.category = data().deepCopy(fields()[3].schema(), other.category);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.itemId)) {
        this.itemId = data().deepCopy(fields()[4].schema(), other.itemId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ClickEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.events.ClickEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.event)) {
        this.event = data().deepCopy(fields()[0].schema(), other.event);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[1].schema(), other.sessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.category)) {
        this.category = data().deepCopy(fields()[3].schema(), other.category);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.itemId)) {
        this.itemId = data().deepCopy(fields()[4].schema(), other.itemId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'event' field.
      * @return The value.
      */
    public java.lang.CharSequence getEvent() {
      return event;
    }


    /**
      * Sets the value of the 'event' field.
      * @param value The value of 'event'.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder setEvent(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.event = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'event' field has been set.
      * @return True if the 'event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'event' field.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder clearEvent() {
      event = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionId() {
      return sessionId;
    }


    /**
      * Sets the value of the 'sessionId' field.
      * @param value The value of 'sessionId'.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder setSessionId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sessionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionId' field has been set.
      * @return True if the 'sessionId' field has been set, false otherwise.
      */
    public boolean hasSessionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sessionId' field.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder clearSessionId() {
      sessionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.category = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder clearCategory() {
      category = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemId' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemId() {
      return itemId;
    }


    /**
      * Sets the value of the 'itemId' field.
      * @param value The value of 'itemId'.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder setItemId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.itemId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'itemId' field has been set.
      * @return True if the 'itemId' field has been set, false otherwise.
      */
    public boolean hasItemId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'itemId' field.
      * @return This builder.
      */
    public com.events.ClickEvent.Builder clearItemId() {
      itemId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClickEvent build() {
      try {
        ClickEvent record = new ClickEvent();
        record.event = fieldSetFlags()[0] ? this.event : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sessionId = fieldSetFlags()[1] ? this.sessionId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.category = fieldSetFlags()[3] ? this.category : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.itemId = fieldSetFlags()[4] ? this.itemId : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClickEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClickEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClickEvent>
    READER$ = (org.apache.avro.io.DatumReader<ClickEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.event == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.event);
    }

    if (this.sessionId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sessionId);
    }

    if (this.timestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timestamp);
    }

    if (this.category == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.category);
    }

    if (this.itemId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.itemId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.event = null;
      } else {
        this.event = in.readString(this.event instanceof Utf8 ? (Utf8)this.event : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sessionId = null;
      } else {
        this.sessionId = in.readString(this.sessionId instanceof Utf8 ? (Utf8)this.sessionId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestamp = null;
      } else {
        this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.category = null;
      } else {
        this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.itemId = null;
      } else {
        this.itemId = in.readString(this.itemId instanceof Utf8 ? (Utf8)this.itemId : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.event = null;
          } else {
            this.event = in.readString(this.event instanceof Utf8 ? (Utf8)this.event : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sessionId = null;
          } else {
            this.sessionId = in.readString(this.sessionId instanceof Utf8 ? (Utf8)this.sessionId : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestamp = null;
          } else {
            this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.category = null;
          } else {
            this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.itemId = null;
          } else {
            this.itemId = in.readString(this.itemId instanceof Utf8 ? (Utf8)this.itemId : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










